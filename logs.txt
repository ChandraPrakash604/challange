#Jenkins Installation
####################################################

[ansible@ip-172-31-82-53 ~]$ ansible-playbook -i hosts jenkins_install.yml

PLAY [Install Jenkins] *****************************************************************************************************************************************************

TASK [jenkins : install wget] **********************************************************************************************************************************************
[WARNING]: Platform linux on host jenkins_host is using the discovered Python interpreter at /usr/bin/python, but future installation of another Python interpreter could
change this. See https://docs.ansible.com/ansible/2.9/reference_appendices/interpreter_discovery.html for more information.
ok: [jenkins_host]

TASK [jenkins : install openjdk] *******************************************************************************************************************************************
changed: [jenkins_host]

TASK [download jenkins.repo] ***********************************************************************************************************************************************
changed: [jenkins_host]

TASK [import jenkins key] **************************************************************************************************************************************************
changed: [jenkins_host]

TASK [install jenkins] *****************************************************************************************************************************************************
changed: [jenkins_host]

TASK [start jenkins] *******************************************************************************************************************************************************
changed: [jenkins_host]

TASK [enable jenkins] ******************************************************************************************************************************************************
ok: [jenkins_host]

TASK [jenkins : sleep for 30 seconds and continue with play] ***************************************************************************************************************
ok: [jenkins_host]

TASK [jenkins : init password jenkin] **************************************************************************************************************************************
ok: [jenkins_host]

TASK [print init password jenkins] *****************************************************************************************************************************************
ok: [jenkins_host] => {
    "result.stdout": "4a52b7776d144c519adb784b094dd53b"
}

PLAY RECAP *****************************************************************************************************************************************************************
jenkins_host               : ok=10   changed=5    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

[ansible@ip-172-31-82-53 ~]$


#Terraform EC2 Instance Creation
####################################################

[ansible@ip-172-31-82-53 project-terraform]$ terraform apply
aws_security_group.security_jenkins_port: Refreshing state... [id=sg-00b17c712b93866ec]
aws_instance.myFirstInstance: Refreshing state... [id=i-0668f61daa6ab7ca1]

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.myFirstInstance will be created
  + resource "aws_instance" "myFirstInstance" {
      + ami                          = "ami-0b0af3577fe5e3532"
      + arn                          = (known after apply)
      + associate_public_ip_address  = (known after apply)
      + availability_zone            = (known after apply)
      + cpu_core_count               = (known after apply)
      + cpu_threads_per_core         = (known after apply)
      + get_password_data            = false
      + host_id                      = (known after apply)
      + id                           = (known after apply)
      + instance_state               = (known after apply)
      + instance_type                = "t2.micro"
      + ipv6_address_count           = (known after apply)
      + ipv6_addresses               = (known after apply)
      + key_name                     = "ansible_ec2"
      + outpost_arn                  = (known after apply)
      + password_data                = (known after apply)
      + placement_group              = (known after apply)
      + primary_network_interface_id = (known after apply)
      + private_dns                  = (known after apply)
      + private_ip                   = (known after apply)
      + public_dns                   = (known after apply)
      + public_ip                    = (known after apply)
      + secondary_private_ips        = (known after apply)
      + security_groups              = [
          + "security_jenkins_port",
        ]
      + source_dest_check            = true
      + subnet_id                    = (known after apply)
      + tags                         = {
          + "Name" = "jenkins_instance"
        }
      + tenancy                      = (known after apply)
      + vpc_security_group_ids       = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_instance.myFirstInstance: Creating...
aws_instance.myFirstInstance: Still creating... [10s elapsed]
aws_instance.myFirstInstance: Still creating... [20s elapsed]
aws_instance.myFirstInstance: Still creating... [30s elapsed]
aws_instance.myFirstInstance: Creation complete after 32s [id=i-0735f8c1016e0e46d]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
[ansible@ip-172-31-82-53 project-terraform]$





#Jenkins console output
####################################################


Console Output
Started by user admin
Obtained Jenkinsfile from git https://github.com/ChandraPrakash604/challange.git
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/jenkins-docker-pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
Selected Git installation does not exist. Using Default
The recommended git tool is: NONE
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/jenkins-docker-pipeline/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/ChandraPrakash604/challange.git # timeout=10
Fetching upstream changes from https://github.com/ChandraPrakash604/challange.git
 > git --version # timeout=10
 > git --version # 'git version 2.32.0'
 > git fetch --tags --force --progress -- https://github.com/ChandraPrakash604/challange.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision dc0cfa0a1134d140f23414599f3a9fbecddfcfd1 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f dc0cfa0a1134d140f23414599f3a9fbecddfcfd1 # timeout=10
Commit message: "Add files via upload"
 > git rev-list --no-walk 85a8fa8f654a1765ebeb28ce576d5b2aca37bcde # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (build)
[Pipeline] sh
+ docker build -t python-docker .
Sending build context to Docker daemon  122.4kB

Step 1/6 : FROM python:3.8-slim-buster
 ---> 5be55fb2aad1
Step 2/6 : WORKDIR /app
 ---> Using cache
 ---> 90c7ec231c21
Step 3/6 : COPY requirements.txt requirements.txt
 ---> Using cache
 ---> 533441215aac
Step 4/6 : RUN pip3 install -r requirements.txt
 ---> Using cache
 ---> a4d291e1c394
Step 5/6 : COPY . .
 ---> 08c1e5912397
Step 6/6 : CMD [ "python3", "-m" , "flask", "run", "--host=0.0.0.0"]
 ---> Running in f50e30618c3a
Removing intermediate container f50e30618c3a
 ---> ff81fd4f87ed
Successfully built ff81fd4f87ed
Successfully tagged python-docker:latest
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (run)
[Pipeline] sh
+ docker run -d -p 5000:5000 python-docker
53bf641336446faaf39a53b249d4475b5e4fcd47fed10c2ad21a0cd96e55567e
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS


